extends StaticBody

signal pointer_entered
signal pointer_exited

export var screen_size = Vector2(3.0, 2.0)
export var viewport_size = Vector2(100.0, 100.0)

var vp = null
var mouse_mask = 0

var _last_pos = null
var _pointer_on_body = false
var _mouse_on_body = false

func _ready():
	var parent = get_parent()
	if parent:
		vp = parent.get_node("viewport")
	
	connect("input_event", self, "_on_static_body_input_event")
	connect("mouse_entered", self, "_on_static_body_mouse_entered")
	connect("mouse_exited", self, "_on_static_body_mouse_exited")

func _unhandled_key_input(event):
	# pass keyboard input if mouse or pointer on this body
	if is_visible_in_tree() and vp and (_pointer_on_body or _mouse_on_body):
		vp.input(event)

# Convert intersection point to screen coordinate
func global_to_viewport(p_at):
	var at = to_local(p_at)
	
	# Convert to screen space
	at.x = ((at.x / screen_size.x) + 0.5) * viewport_size.x
	at.y = (0.5 - (at.y / screen_size.y)) * viewport_size.y
	
	return Vector2(at.x, at.y)
	
func _moved(from, to):
	var local_from = global_to_viewport(from)
	var local_to = global_to_viewport(to)
	
	# Let's mimic a mouse
	var event = InputEventMouseMotion.new()
	event.set_position(local_to)
	event.set_global_position(local_to)
	event.set_relative(local_to - local_from) # should this be scaled/warped?
	event.set_button_mask(mouse_mask)
	
	if vp:
		vp.input(event)

func _pressed(at):
	var local_at = global_to_viewport(at)
	
	# Let's mimic a mouse
	mouse_mask = 1
	var event = InputEventMouseButton.new()
	event.set_button_index(1)
	event.set_pressed(true)
	event.set_position(local_at)
	event.set_global_position(local_at)
	event.set_button_mask(mouse_mask)
	
	if vp:
		vp.input(event)
	
func _released(at):
	var local_at = global_to_viewport(at)
	
	# Let's mimic a mouse
	mouse_mask = 0
	var event = InputEventMouseButton.new()
	event.set_button_index(1)
	event.set_pressed(false)
	event.set_position(local_at)
	event.set_global_position(local_at)
	event.set_button_mask(mouse_mask)
	
	if vp:
		vp.input(event)

func _exit_cleanup():
	if _last_pos == null:
		_last_pos = $collision_shape.global_transform.origin
	if mouse_mask == 1:
		_released(_last_pos)
	var to = $collision_shape.global_transform.xform(Vector3(-10000, -10000, 0))
	_moved(_last_pos, to) # move to a distant point
	_last_pos = null

func pointer_moved(from, to):
	if not get_parent().enable_pointer_input:
		return
	_moved(from, to)
	_last_pos = to
	
func pointer_pressed(at):
	if not get_parent().enable_pointer_input:
		return
	_pressed(at)

func pointer_released(at):
	if not get_parent().enable_pointer_input:
		return
	_released(at)
	
func pointer_entered():
	if not get_parent().enable_pointer_input:
		return
	_pointer_on_body = true
	emit_signal("pointer_entered")	
	
func pointer_exited():
	if not get_parent().enable_pointer_input:
		return
	_exit_cleanup()
	_pointer_on_body = false
	emit_signal("pointer_exited")

func _on_static_body_mouse_entered():
	if not get_parent().enable_mouse_input:
		return
	_mouse_on_body = true

func _on_static_body_mouse_exited():
	if not get_parent().enable_mouse_input:
		return
	_mouse_on_body = false
	if not _pointer_on_body:
		_exit_cleanup()
	
func _on_static_body_input_event(camera, event, click_position, click_normal, shape_idx):
	if _pointer_on_body or not _mouse_on_body or not get_parent().enable_mouse_input:
		return
		
	if event is InputEventMouseButton and event.button_index == BUTTON_LEFT:
		if event.pressed:
			_pressed(click_position)
		else:
			_released(click_position)
	elif event is InputEventMouseMotion:
		var from = _last_pos if _last_pos != null else click_position
		var to = click_position
		_moved(from, to)
		
	_last_pos = click_position

